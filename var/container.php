<?php

use BackToVendor\Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use BackToVendor\Symfony\Component\DependencyInjection\ContainerInterface;
use BackToVendor\Symfony\Component\DependencyInjection\Container;
use BackToVendor\Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use BackToVendor\Symfony\Component\DependencyInjection\Exception\LogicException;
use BackToVendor\Symfony\Component\DependencyInjection\Exception\RuntimeException;
use BackToVendor\Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use BackToVendor\Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ContainerQ094TUd extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'BackTo\\Framework\\Blocks\\BlockRegistry' => 'getBlockRegistryService',
            'BackTo\\Framework\\Blocks\\BlockStyleRegistry' => 'getBlockStyleRegistryService',
            'BackTo\\Framework\\Hooks\\HookRegistry' => 'getHookRegistryService',
            'BackTo\\Framework\\PostMeta\\PostMetaStructureRegistry' => 'getPostMetaStructureRegistryService',
            'BackTo\\Framework\\PostType\\PostTypeRegistry' => 'getPostTypeRegistryService',
            'BackTo\\Framework\\Taxonomy\\TaxonomyRegistry' => 'getTaxonomyRegistryService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            '.abstract.instanceof.BackTo\\Framework\\Blocks\\Actions\\ReplaceImgBlockBySvgBlock' => true,
            '.abstract.instanceof.BackTo\\Framework\\Blocks\\BlockRegistry' => true,
            '.abstract.instanceof.BackTo\\Framework\\Blocks\\BlockStyleRegistry' => true,
            '.abstract.instanceof.BackTo\\Framework\\Blocks\\RegisterBlockStyles' => true,
            '.abstract.instanceof.BackTo\\Framework\\Hooks\\HookRegistry' => true,
            '.abstract.instanceof.BackTo\\Framework\\PostMeta\\PostMetaStructureRegistry' => true,
            '.abstract.instanceof.BackTo\\Framework\\PostMeta\\RegisterPostMetaStructure' => true,
            '.abstract.instanceof.BackTo\\Framework\\PostType\\PostTypeRegistry' => true,
            '.abstract.instanceof.BackTo\\Framework\\PostType\\RegisterPostType' => true,
            '.abstract.instanceof.BackTo\\Framework\\Taxonomy\\RegisterTaxonomy' => true,
            '.abstract.instanceof.BackTo\\Framework\\Taxonomy\\TaxonomyRegistry' => true,
            '.abstract.instanceof.BackTo\\Framework\\Theme\\Actions\\CleanHead' => true,
            '.abstract.instanceof.BackTo\\Framework\\Theme\\Actions\\RemoveEmojis' => true,
            '.abstract.instanceof.BackTo\\Framework\\Theme\\I18n\\LoadThemeTextDomain' => true,
            '.abstract.instanceof.Portfolio\\BlockEditor\\EditorSettings' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\Blocks\\Actions\\ReplaceImgBlockBySvgBlock' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\Blocks\\RegisterBlockStyles' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\PostMeta\\RegisterPostMetaStructure' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\PostType\\RegisterPostType' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\Taxonomy\\RegisterTaxonomy' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\Theme\\Actions\\CleanHead' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\Theme\\Actions\\RemoveEmojis' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.BackTo\\Framework\\Theme\\I18n\\LoadThemeTextDomain' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\HookInterface.0.Portfolio\\BlockEditor\\EditorSettings' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\RegistryInterface.0.BackTo\\Framework\\Blocks\\BlockRegistry' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\RegistryInterface.0.BackTo\\Framework\\Blocks\\BlockStyleRegistry' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\RegistryInterface.0.BackTo\\Framework\\Hooks\\HookRegistry' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\RegistryInterface.0.BackTo\\Framework\\PostMeta\\PostMetaStructureRegistry' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\RegistryInterface.0.BackTo\\Framework\\PostType\\PostTypeRegistry' => true,
            '.instanceof.BackTo\\Framework\\Contracts\\RegistryInterface.0.BackTo\\Framework\\Taxonomy\\TaxonomyRegistry' => true,
            'BackToVendor\\Psr\\Container\\ContainerInterface' => true,
            'BackToVendor\\Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
            'BackTo\\DesignSystem\\Foundation\\Color\\Configurator\\BackgroundColorConfigurator' => true,
            'BackTo\\Framework\\Assets\\ReplaceImgTagBySvgTag' => true,
            'BackTo\\Framework\\Assets\\SvgFactory' => true,
            'BackTo\\Framework\\Assets\\WordPressScriptsAssets' => true,
            'BackTo\\Framework\\Blocks\\Actions\\ReplaceImgBlockBySvgBlock' => true,
            'BackTo\\Framework\\Blocks\\RegisterBlockStyles' => true,
            'BackTo\\Framework\\PostMeta\\Factory\\PostMetaFactory' => true,
            'BackTo\\Framework\\PostMeta\\RegisterPostMetaStructure' => true,
            'BackTo\\Framework\\PostMeta\\Repository\\PostMetaRepository' => true,
            'BackTo\\Framework\\PostType\\Factory\\PostFactory' => true,
            'BackTo\\Framework\\PostType\\PostTypeFactory' => true,
            'BackTo\\Framework\\PostType\\RegisterPostType' => true,
            'BackTo\\Framework\\PostType\\Repository\\PostRepository' => true,
            'BackTo\\Framework\\Taxonomy\\CustomTaxonomy' => true,
            'BackTo\\Framework\\Taxonomy\\Factory\\TermFactory' => true,
            'BackTo\\Framework\\Taxonomy\\RegisterTaxonomy' => true,
            'BackTo\\Framework\\Taxonomy\\Repository\\TermRepository' => true,
            'BackTo\\Framework\\Taxonomy\\TaxonomyFactory' => true,
            'BackTo\\Framework\\Taxonomy\\TaxonomyRepository' => true,
            'BackTo\\Framework\\Theme\\Actions\\CleanHead' => true,
            'BackTo\\Framework\\Theme\\Actions\\RemoveEmojis' => true,
            'BackTo\\Framework\\Theme\\I18n\\LoadThemeTextDomain' => true,
            'Portfolio\\BlockEditor\\EditorSettings' => true,
            'Portfolio\\Configurator\\PortfolioColorConfigurator' => true,
        ];
    }

    /**
     * Gets the public 'BackTo\Framework\Blocks\BlockRegistry' shared autowired service.
     *
     * @return \BackTo\Framework\Blocks\BlockRegistry
     */
    protected function getBlockRegistryService()
    {
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/RegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Blocks/BlockRegistry.php';

        return $this->services['BackTo\\Framework\\Blocks\\BlockRegistry'] = new \BackTo\Framework\Blocks\BlockRegistry();
    }

    /**
     * Gets the public 'BackTo\Framework\Blocks\BlockStyleRegistry' shared autowired service.
     *
     * @return \BackTo\Framework\Blocks\BlockStyleRegistry
     */
    protected function getBlockStyleRegistryService()
    {
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/RegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Blocks/BlockStyleRegistry.php';

        return $this->services['BackTo\\Framework\\Blocks\\BlockStyleRegistry'] = new \BackTo\Framework\Blocks\BlockStyleRegistry();
    }

    /**
     * Gets the public 'BackTo\Framework\Hooks\HookRegistry' shared autowired service.
     *
     * @return \BackTo\Framework\Hooks\HookRegistry
     */
    protected function getHookRegistryService()
    {
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/RegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Hooks/HookRegistry.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/HookInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/Hooks.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Blocks/Actions/ReplaceImgBlockBySvgBlock.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Assets/ReplaceImgTagBySvgTag.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Assets/SvgFactory.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Blocks/RegisterBlockStyles.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/ActivationHooks.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostType/RegisterPostType.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostType/PostTypeFactory.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Taxonomy/RegisterTaxonomy.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Taxonomy/TaxonomyFactory.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Theme/I18n/LoadThemeTextDomain.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostMeta/RegisterPostMetaStructure.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Theme/Actions/CleanHead.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Theme/Actions/RemoveEmojis.php';
        include_once \dirname(__DIR__, 1).'/includes/BlockEditor/EditorSettings.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Blocks/BlockStyleRegistry.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostType/Contracts/PostTypeRegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostType/PostTypeRegistry.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Taxonomy/TaxonomyRegistry.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostMeta/PostMetaStructureRegistry.php';

        $this->services['BackTo\\Framework\\Hooks\\HookRegistry'] = $instance = new \BackTo\Framework\Hooks\HookRegistry();

        $instance->addHook(new \BackTo\Framework\Blocks\Actions\ReplaceImgBlockBySvgBlock(new \BackTo\Framework\Assets\ReplaceImgTagBySvgTag(new \BackTo\Framework\Assets\SvgFactory())));
        $instance->addHook(new \BackTo\Framework\Blocks\RegisterBlockStyles(($this->services['BackTo\\Framework\\Blocks\\BlockStyleRegistry'] ?? ($this->services['BackTo\\Framework\\Blocks\\BlockStyleRegistry'] = new \BackTo\Framework\Blocks\BlockStyleRegistry()))));
        $instance->addHook(new \BackTo\Framework\PostType\RegisterPostType(($this->services['BackTo\\Framework\\PostType\\PostTypeRegistry'] ?? ($this->services['BackTo\\Framework\\PostType\\PostTypeRegistry'] = new \BackTo\Framework\PostType\PostTypeRegistry())), new \BackTo\Framework\PostType\PostTypeFactory()));
        $instance->addHook(new \BackTo\Framework\Taxonomy\RegisterTaxonomy(($this->services['BackTo\\Framework\\Taxonomy\\TaxonomyRegistry'] ?? ($this->services['BackTo\\Framework\\Taxonomy\\TaxonomyRegistry'] = new \BackTo\Framework\Taxonomy\TaxonomyRegistry())), new \BackTo\Framework\Taxonomy\TaxonomyFactory()));
        $instance->addHook(new \BackTo\Framework\Theme\I18n\LoadThemeTextDomain(\dirname(__DIR__, 1), 'portfolio'));
        $instance->addHook(new \BackTo\Framework\PostMeta\RegisterPostMetaStructure(($this->services['BackTo\\Framework\\PostMeta\\PostMetaStructureRegistry'] ?? ($this->services['BackTo\\Framework\\PostMeta\\PostMetaStructureRegistry'] = new \BackTo\Framework\PostMeta\PostMetaStructureRegistry()))));
        $instance->addHook(new \BackTo\Framework\Theme\Actions\CleanHead());
        $instance->addHook(new \BackTo\Framework\Theme\Actions\RemoveEmojis());
        $instance->addHook(new \Portfolio\BlockEditor\EditorSettings());

        return $instance;
    }

    /**
     * Gets the public 'BackTo\Framework\PostMeta\PostMetaStructureRegistry' shared autowired service.
     *
     * @return \BackTo\Framework\PostMeta\PostMetaStructureRegistry
     */
    protected function getPostMetaStructureRegistryService()
    {
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/RegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostMeta/PostMetaStructureRegistry.php';

        return $this->services['BackTo\\Framework\\PostMeta\\PostMetaStructureRegistry'] = new \BackTo\Framework\PostMeta\PostMetaStructureRegistry();
    }

    /**
     * Gets the public 'BackTo\Framework\PostType\PostTypeRegistry' shared autowired service.
     *
     * @return \BackTo\Framework\PostType\PostTypeRegistry
     */
    protected function getPostTypeRegistryService()
    {
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/RegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostType/Contracts/PostTypeRegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/PostType/PostTypeRegistry.php';

        return $this->services['BackTo\\Framework\\PostType\\PostTypeRegistry'] = new \BackTo\Framework\PostType\PostTypeRegistry();
    }

    /**
     * Gets the public 'BackTo\Framework\Taxonomy\TaxonomyRegistry' shared autowired service.
     *
     * @return \BackTo\Framework\Taxonomy\TaxonomyRegistry
     */
    protected function getTaxonomyRegistryService()
    {
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Contracts/RegistryInterface.php';
        include_once \dirname(__DIR__, 5).'/vendor/backto/framework/src/Taxonomy/TaxonomyRegistry.php';

        return $this->services['BackTo\\Framework\\Taxonomy\\TaxonomyRegistry'] = new \BackTo\Framework\Taxonomy\TaxonomyRegistry();
    }

    /**
     * @return array|bool|float|int|string|\UnitEnum|null
     */
    public function getParameter(string $name)
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    protected function getDefaultParameters(): array
    {
        return [
            'themeDirectory' => \dirname(__DIR__, 1),
            'themeTextDomain' => 'portfolio',
        ];
    }
}
